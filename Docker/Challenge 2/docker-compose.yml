---
version: '3.8'
services:
      
  # Nifi service is exactly the same as we used in Challenge 1, but in this case we are writing
  # the tags used in the docker run command in the compose yaml file.       
  nifi:
    container_name: nifi-for-kafka #to distinguish image from one in Challenge 1
    image: apache/nifi:latest
    restart: always
    ports:
      - 8443:8443
    environment:
      SINGLE_USER_CREDENTIALS_USERNAME: admin
      SINGLE_USER_CREDENTIALS_PASSWORD: password1234

  # Kafka services include a web-based UI monitor data flows and find and troubleshoot issues 
  # in data while delivering optimal performance. Zookeeper provides a centralized service for
  # providing configuration information, naming, synchronization and group services over large
  # clusters in distributed systems. It could be run without it though. And lastly, Kafka itself 
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # PostgreSQL services include PgAdmin that is a web-based GUI tool used to interact with 
  # the Postgres database sessions, both locally and remote servers as well; and Postgres 
  # itself. PgAdmin, as well as Mongo-Express, is a client software application and 
  # database administration tool. These tools are optional as all actions performed could 
  # also be done by means of the CLI, but it is recommended to make it more user-friendly.
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    ports: 
      - 5432:5432
    environment:
      - DATABASE_HOST=127.0.0.1
      - POSTGRES_USER=mchi
      - POSTGRES_PASSWORD=mchi1234
      - POSTGRES_DB=simpsons
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "mchi@postgres.com"
      PGADMIN_DEFAULT_PASSWORD: "mchi1234"
    ports: 
      - 80:80
    depends_on: 
      - postgres

  # MongoDB services include Mongo-Express that is an interactive lightweight Web-Based 
  # administrative tool to effectively manage MongoDB; and MongoDB itself.
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports: 
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mchi
      - MONGO_INITDB_ROOT_PASSWORD=mchi1234
      - MONGO_INITDB_DATABASE=simpsons

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "mchi"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "mchi1234"
      ME_CONFIG_MONGODB_SERVER: "mongo"
    ports: 
      - 8081:8081
    depends_on: 
      - mongo